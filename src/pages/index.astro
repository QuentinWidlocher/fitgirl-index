---
import { db, Genre, like, desc, and } from "astro:db";
import { getList } from "../pages/db/_list";
import Layout from "../layouts/Layout.astro";
import { Release } from "astro:db";
import { count as countFn } from "astro:db";
import ReleaseList from "../components/ReleaseList.astro";
import { cacheDuration, cacheTags } from "../cache-tags";
import Searchable from "../layouts/Searchable.astro";

export const prerender = false;

// // Manual invalidation (based on cache tag)
// Astro.response.headers.set(
//     "CDN-Cache-Control",
//     `max-age=${cacheDuration.halfDay}, s-maxage=${cacheDuration.oneYear}`,
// );
// Astro.response.headers.set(
//     "Cache-Control",
//     `max-age=${cacheDuration.halfDay}, s-maxage=${cacheDuration.oneYear}`,
// );
// Astro.response.headers.set("Cache-Tag", cacheTags.index);

let page = (Number(Astro.url.searchParams.get("p")) || 1) - 1;
let selectedGenre = Astro.url.searchParams.get("genre");
let selectedCompany = Astro.url.searchParams.get("company");
let title = Astro.url.searchParams.get("title");
let pinkPaw = Astro.url.searchParams.has("pinkpaw");
let bookmarked = Astro.url.searchParams.has("bookmarked");

const bookmarks: string[] = Astro.cookies?.get("bookmarks")?.json() ?? [];

let releases = (
    await Promise.all(
        [...Array(page + 1).keys()].flatMap((page) =>
            getList({
                title,
                selectedGenre,
                pinkPaw,
                page,
                slugs: bookmarked ? bookmarks : undefined,
                selectedCompany,
            }),
        ),
    )
)
    .flat()
    .map((r) => ({ ...r, bookmarked: bookmarks.includes(r.slug) }));
---

<Layout title="FitGirl Index">
    <Searchable>
        <ReleaseList releases={releases} />
    </Searchable>
</Layout>

<script>
    const targetNode = document.getElementById("end-of-list")!;
    const observer = new IntersectionObserver(async function ([
        { isIntersecting },
    ]) {
        if (isIntersecting && window.scrollY > 0) {
            const searchParams = new URL(location.href).searchParams;
            searchParams.set(
                "p",
                String((Number(searchParams.get("p")) || 1) + 1),
            );

            const apiUrl = new URL(
                "/list-fragment?" + searchParams.toString(),
                location.origin,
            );
            const result = await fetch(apiUrl).then((res) => res.text());
            var el = document.createElement("div");
            el.innerHTML = result;
            const releases = [
                ...el.querySelectorAll("ul > li:not(#end-of-list)"),
            ];
            targetNode.before(...releases);
            history.replaceState(
                null,
                "",
                new URL("?" + searchParams.toString(), location.origin),
            );
        }
    });

    document.addEventListener("DOMContentLoaded", () =>
        observer.observe(targetNode),
    );
</script>
