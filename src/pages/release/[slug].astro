---
import { db, Release, ReleaseGenres, eq } from "astro:db";
import Layout from "../../layouts/Layout.astro";
import { ReleaseLanguages } from "astro:db";
import { ReleaseCompanies } from "astro:db";
import { cacheDuration } from "../../cache-tags";

export const prerender = false; // that would be nice, but we need to dynamically update the list

if (!Astro.params.slug) {
    return Astro.redirect("/");
}

Astro.response.headers.set(
    "CDN-Cache-Control",
    `max-age=${cacheDuration.halfDay}, s-maxage=${cacheDuration.oneYear}`,
);
Astro.response.headers.set(
    "Cache-Control",
    `max-age=${cacheDuration.halfDay}, s-maxage=${cacheDuration.oneYear}`,
);
Astro.response.headers.set(
    "Cache-Tag",
    Astro.params.slug.replace(/[^a-z0-9]/gi, "_"),
);

const bookmarked = Astro.cookies
    ?.get("bookmarks")
    ?.json()
    .includes(Astro.params.slug);

let [rawRelease] = await db
    .select()
    .from(Release)
    .where(eq(Release.slug, Astro.params.slug));

const [genres, languages, companies] = await Promise.all([
    db
        .select()
        .from(ReleaseGenres)
        .where(eq(ReleaseGenres.releaseId, rawRelease.id)),
    db
        .select()
        .from(ReleaseLanguages)
        .where(eq(ReleaseLanguages.releaseId, rawRelease.id)),
    db
        .select()
        .from(ReleaseCompanies)
        .where(eq(ReleaseCompanies.releaseId, rawRelease.id)),
]);

const release = {
    ...rawRelease,
    mirrors: JSON.parse(rawRelease.mirrors as string) as {
        links: { name: string; link: string }[];
    }[],
    screenshots: JSON.parse(rawRelease.screenshots as string) as string[],
};
---

<Layout
    title={`${release.title.split(/[-–,]/g).at(0)} - FitGirl Index`}
    description={release.title.split(/[-–,]/g).slice(1).join("")}
    imageUrl={release.coverSrc}
>
    <button
        aria-label="Back"
        class="fixed top-5 left-5 z-50 aspect-square w-7 h-7 bg-gray-500 rounded-full shadow-lg"
        onclick="window.history.back()"
    >
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="18"
            height="18"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="lucide lucide-arrow-left mx-auto"
            ><path d="m12 19-7-7 7-7"></path><path d="M19 12H5"></path></svg
        >
    </button>
    <main
        class="container overflow-x-hidden mt-10 pt-20 mx-auto grid grid-cols-1 grid-rows-[auto_1fr] lg:grid-rows-1 lg:grid-cols-[1fr_2fr] gap-5"
    >
        <section class="flex flex-col gap-10">
            <img
                transition:name={`release-cover-${release.slug}`}
                class="w-full lg:rounded-xl shadow-xl"
                src={release.coverSrc}
                alt={`Cover of ${release.title}`}
            />

            <ul class="grid grid-cols-3 gap-2">
                {
                    release.screenshots.slice(1, 7).map((screenshot, index) => (
                        <li id={`screenshot_${index}`}>
                            <img
                                class="rounded shadow cursor-pointer"
                                onerror='this.style.display = "none"'
                                src={screenshot}
                                alt={`Screenshot ${index + 1} of ${release.title}`}
                            />
                        </li>
                    ))
                }
                {
                    release.screenshots[7] ? (
                        <li id="screenshot_7" class="col-span-3">
                            <img
                                class="rounded shadow cursor-pointer w-full"
                                onerror='this.style.display = "none"'
                                src={release.screenshots[7]}
                                alt={`Screenshot 8 of ${release.title}`}
                            />
                        </li>
                    ) : null
                }
            </ul>
        </section>
        <section
            class="bg-gray-600 rounded-t-xl lg:rounded-b-xl p-10 flex flex-col"
        >
            <button
                id="bookmark"
                data-slug={Astro.params.slug}
                aria-checked={bookmarked}
                class="z-10 aspect-square w-10 h-10 bg-gray-500 aria-checked:bg-red-200 aria-checked:border-2 aria-checked:border-red-500 aria-checked:text-red-500 rounded-full ml-auto -mb-5 -mt-5 -mr-5"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="lucide lucide-bookmark-icon lucide-bookmark mx-auto"
                    ><path
                        d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"
                    ></path></svg
                ></button
            >
            <div class="flex gap-5">
                {
                    release.pinkPaw ? (
                        <a
                            href="/?pinkpaw"
                            class="bg-pink-100 border-2 border-pink-400 rounded-full p-1 h-11 w-11 text-pink-400"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                width="32"
                                height="32"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                                stroke-width="2"
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                class="lucide lucide-paw-print"
                            >
                                <circle cx="11" cy="4" r="2" />
                                <circle cx="18" cy="8" r="2" />
                                <circle cx="20" cy="16" r="2" />
                                <path d="M9 10a5 5 0 0 1 5 5v3.5a3.5 3.5 0 0 1-6.84 1.045Q6.52 17.48 4.46 16.84A3.5 3.5 0 0 1 5.5 10Z" />
                            </svg>
                        </a>
                    ) : null
                }
                <a
                    class="hover:underline underline-offset-4"
                    href={release.link}
                >
                    <h1
                        class="text-5xl font-bold"
                        transition:name={`release-title-${release.slug}`}
                    >
                        {release.title.split(/[-–,]/g).at(0)}
                    </h1>
                    <h2 class="text-xl ml-1 text-slate-400">
                        {release.title.split(/[-–,]/g).slice(1)}
                    </h2>
                </a>
            </div>

            <div class="flex gap-5 mt-5">
                <div class="text-gray-300">
                    <span> Published : </span>
                    <strong> {release.published.toLocaleDateString()} </strong>
                </div>
                <div class="text-gray-300">
                    <span> Original Size : </span>
                    <strong> {release.originalSize} </strong>
                </div>
                <div class="text-gray-300">
                    <span> Repack Size : </span>
                    <strong> {release.repackSize} </strong>
                </div>
            </div>
            <div class="flex gap-5 mt-2 mb-5">
                <div class="text-gray-300">
                    <span>
                        {languages.length > 1 ? "Languages" : "Language"} :
                    </span>
                    <strong>
                        {languages.map((l) => l.language).join("/")}
                    </strong>
                </div>
            </div>

            <div class="flex items-center flex-wrap">
                <strong class="w-24">
                    {companies.length > 1 ? "Companies" : "Company"}
                </strong>
                <ul
                    class="flex gap-2 max-lg:-mx-10 max-lg:pl-10 overflow-x-auto p-5 pl-0 -my-3"
                >
                    {
                        companies.map(({ company }) => (
                            <li>
                                <a
                                    class="px-2 py-1 rounded bg-gray-500 hover:bg-red-500 hover:shadow-lg hover:shadow-red-500/30 whitespace-nowrap"
                                    href={`/?company=${company}`}
                                >
                                    {company}
                                </a>
                            </li>
                        ))
                    }
                </ul>
            </div>

            <div class="flex items-center flex-wrap">
                <strong class="w-24">
                    {genres.length > 1 ? "Genres" : "Genre"}
                </strong>
                <ul
                    class="flex gap-2 max-lg:-mx-10 max-lg:pl-10 overflow-x-auto p-5 pl-0 -my-3"
                >
                    {
                        genres.map(({ genre }) => (
                            <li>
                                <a
                                    class="px-2 py-1 rounded bg-gray-500 hover:bg-red-500 hover:shadow-lg hover:shadow-red-500/30 whitespace-nowrap"
                                    href={`/?genre=${genre}`}
                                >
                                    {genre}
                                </a>
                            </li>
                        ))
                    }
                </ul>
            </div>

            <ul class="flex flex-col gap-5 my-10">
                {
                    release.mirrors.map((mirror) => (
                        <li>
                            <ul class="flex gap-1">
                                {mirror.links.map((link) => (
                                    <li>
                                        <a
                                            class="whitespace-nowrap bg-gray-500 hover:bg-red-500 hover:shadow-lg hover:shadow-red-500/30 rounded-full px-3 py-2"
                                            href={link.link}
                                        >
                                            {" "}
                                            {link.name}{" "}
                                        </a>
                                    </li>
                                ))}
                            </ul>
                        </li>
                    ))
                }
            </ul>
            <ul class="mt-5" set:html={release.repackDescription} />
            <div class="mt-5 *:my-2" set:html={release.gameDescription} />
        </section>
    </main>
</Layout>

<script is:inline>
    document.querySelectorAll("li[id^=screenshot]").forEach((el, i, list) => {
        const screenshotUrl = el.querySelector("img").getAttribute("src");

        el.addEventListener("click", () => {
            let currentIndex = i;

            function changeImg(delta) {
                currentIndex = (currentIndex + delta) % list.length;

                const nextEl = [...list].at(currentIndex);
                const nextScreenshotUrl = nextEl
                    .querySelector("img")
                    .getAttribute("src");

                img.src = nextScreenshotUrl.replace(".240p.jpg", "");
            }

            const onKeyEvent = (e) => {
                if (e.key == "ArrowRight") {
                    changeImg(1);
                } else if (e.key == "ArrowLeft") {
                    changeImg(-1);
                } else if (e.key == "Escape") {
                    close();
                }
            };

            const close = (ev) => {
                ev?.stopPropagation();
                window.removeEventListener("keyup", onKeyEvent);
                backdrop.remove();
            };

            const backdrop = document.createElement("div");
            backdrop.className =
                "cursor-pointer p-1 lg:p-20 z-20 fixed top-0 left-0 w-screen h-screen grid place-content-center bg-black/50";
            backdrop.addEventListener("click", close);

            const imgContainer = document.createElement("div");
            imgContainer.className = "relative";
            backdrop.append(imgContainer);

            const loadingDiv = document.createElement("div");
            loadingDiv.className =
                "absolute -z-10 top-0 w-full h-full animate-pulse bg-gray-600";
            imgContainer.append(loadingDiv);

            const img = document.createElement("img");
            img.className = "object-contain w-full h-full";
            img.src = screenshotUrl.replace(".240p.jpg", "");

            imgContainer.append(img);

            window.addEventListener("keyup", onKeyEvent);

            el.append(backdrop);
        });
    });
</script>

<script>
    import { actions } from "astro:actions";

    const btn = document.querySelector("button#bookmark");
    const slug = btn?.getAttribute("data-slug");

    if (btn && slug) {
        btn.addEventListener("click", async () => {
            const result = await actions.toggleBookmark(slug);
            btn.setAttribute("aria-checked", result.data ? "true" : "");
        });
    }
</script>
